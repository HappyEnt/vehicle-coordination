cmake_minimum_required(VERSION 3.0)

# Setup the project.
# Its name is defined to be the controller directory name.
get_filename_component(PROJECT ${CMAKE_SOURCE_DIR} NAME)
project(${PROJECT})

# Get C or C++ sources in the current directory (only).
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

find_package(GSL REQUIRED)
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)

find_package(Boost COMPONENTS log log_setup thread system REQUIRED)

# Link with the Webots controller library.
link_directories($ENV{WEBOTS_HOME}/lib/controller "../../../fast-particle-filter/pf/c_implementation/build")
set (LIBRARIES ${CMAKE_SHARED_LIBRARY_PREFIX}Controller${CMAKE_SHARED_LIBRARY_SUFFIX} ${CMAKE_SHARED_LIBRARY_PREFIX}CppController${CMAKE_SHARED_LIBRARY_SUFFIX})
include_directories($ENV{WEBOTS_HOME}/include/controller/c $ENV{WEBOTS_HOME}/include/controller/cpp "../../../fast-particle-filter/pf/c_implementation")

find_package(VTK COMPONENTS
  ChartsCore
  CommonColor
  CommonCore
  FiltersSources
  InteractionStyle
  RenderingContextOpenGL2
  RenderingCore
  RenderingFreeType
  RenderingGL2PSOpenGL2
  RenderingOpenGL2
  ViewsContext2D
)

add_executable(vis vis.cpp)

target_link_libraries(vis PRIVATE ${VTK_LIBRARIES} ${Boost_LIBRARIES})


vtk_module_autoinit(
  TARGETS vis
  MODULES ${VTK_LIBRARIES}
)

# Setup the target executable.
add_executable(${PROJECT} crazyflie_controller.cpp pid_controller.c data_logger.cpp)
target_link_libraries(${PROJECT} ${LIBRARIES} BeliefPropagation GSL::gsl Boost::boost)


# Copy the target executable at the right location.
add_custom_command(TARGET ${PROJECT} POST_BUILD COMMAND ${CMAKE_COMMAND} -E
  copy ${CMAKE_BINARY_DIR}/${PROJECT} ${CMAKE_SOURCE_DIR}
)
